import tkinter as tk
from tkinter import filedialog, messagebox
import pyperclip

class VirtualKeyboard:
    def __init__(self, root):
        self.root = root
        self.root.title("Virtual Keyboard Plus")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞: –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –∏ –ø–æ–ª–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –º–∏–Ω—É—Å –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á
        window_width = screen_width // 2
        window_height = screen_height - 60
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ —Å–ª–µ–≤–∞ (x=0, y=0)
        self.root.geometry(f"{window_width}x{window_height}+0+0")
        self.root.configure(bg="#1a1a2e")
        
        # –†–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        self.layouts = {
            'EN': [
                ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace'],
                ['Tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\'],
                ['Caps', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', "'", 'Enter'],
                ['Shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'Shift'],
                ['Ctrl', 'Alt', 'Space', 'Alt', 'Ctrl']
            ],
            'RU': [
                ['—ë', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace'],
                ['Tab', '–π', '—Ü', '—É', '–∫', '–µ', '–Ω', '–≥', '—à', '—â', '–∑', '—Ö', '—ä', '\\'],
                ['Caps', '—Ñ', '—ã', '–≤', '–∞', '–ø', '—Ä', '–æ', '–ª', '–¥', '–∂', '—ç', 'Enter'],
                ['Shift', '—è', '—á', '—Å', '–º', '–∏', '—Ç', '—å', '–±', '—é', '.', 'Shift'],
                ['Ctrl', 'Alt', 'Space', 'Alt', 'Ctrl']
            ],
            'UA': [
                ["'", '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace'],
                ['Tab', '–π', '—Ü', '—É', '–∫', '–µ', '–Ω', '–≥', '—à', '—â', '–∑', '—Ö', '—ó', '\\'],
                ['Caps', '—Ñ', '—ñ', '–≤', '–∞', '–ø', '—Ä', '–æ', '–ª', '–¥', '–∂', '—î', 'Enter'],
                ['Shift', '—è', '—á', '—Å', '–º', '–∏', '—Ç', '—å', '–±', '—é', '.', 'Shift'],
                ['Ctrl', 'Alt', 'Space', 'Alt', 'Ctrl']
            ]
        }
        
        # Shift-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        self.shift_maps = {
            'EN': {
                '`': '~', '1': '!', '2': '@', '3': '#', '4': '$', '5': '%',
                '6': '^', '7': '&', '8': '*', '9': '(', '0': ')',
                '-': '_', '=': '+', '[': '{', ']': '}', '\\': '|',
                ';': ':', "'": '"', ',': '<', '.': '>', '/': '?'
            },
            'RU': {
                '1': '!', '2': '"', '3': '‚Ññ', '4': ';', '5': '%',
                '6': ':', '7': '?', '8': '*', '9': '(', '0': ')',
                '-': '_', '=': '+', '.': ',', '—ë': '–Å'
            },
            'UA': {
                '1': '!', '2': '"', '3': '‚Ññ', '4': ';', '5': '%',
                '6': ':', '7': '?', '8': '*', '9': '(', '0': ')',
                '-': '_', '=': '+', '.': ',', "'": '‚Ç¥'
            }
        }
        
        self.current_layout = 'RU'
        self.caps_lock = False
        self.shift_pressed = False
        self.is_modified = False
        self.current_file = None
        self.key_buttons = {}
        self.lang_buttons = {}
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ undo/redo
        self.undo_stack = []
        self.redo_stack = []
        self.last_saved_text = "\n"
        self.undo_in_progress = False
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.save_timer = None
        self.pending_save = False
        self.last_input_time = 0
        
        # ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê UNDO: –í—Ä–µ–º—è –ø–∞—É–∑—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
        # –ï—Å–ª–∏ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ –∫–ª–∞–≤–∏—à –ø—Ä–æ—Ö–æ–¥–∏—Ç –ú–ï–ù–¨–®–ï —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - —Å–∏–º–≤–æ–ª—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è
        # –ï—Å–ª–∏ –ë–û–õ–¨–®–ï - —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è undo
        # 
        # –ü—Ä–∏–º–µ—Ä—ã:
        # 300 –º—Å (0.3 —Å–µ–∫) - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä, —É–¥–∞–ª—è–µ—Ç –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–≤
        # 500 –º—Å (0.5 —Å–µ–∫) - —Å—Ä–µ–¥–Ω–∏–π –Ω–∞–±–æ—Ä, —É–¥–∞–ª—è–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã –±—É–∫–≤  
        # 1000 –º—Å (1 —Å–µ–∫) - –º–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä, —É–¥–∞–ª—è–µ—Ç –ø–æ 1-2 –±—É–∫–≤—ã
        # 1500 –º—Å (1.5 —Å–µ–∫) - –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø–æ—á—Ç–∏ –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        self.typing_pause_threshold = 300  # ‚¨ÖÔ∏è –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–û –ó–ù–ê–ß–ï–ù–ò–ï
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.save_timer = None
        self.pending_save = False
        self.last_input_time = 0
        self.typing_pause_threshold = 10  # 1 —Å–µ–∫—É–Ω–¥–∞ –ø–∞—É–∑—ã = –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö—ç—à –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
        self.color_cache = {
            'special_normal': "#533483",
            'special_active': "#6b46a6",
            'regular_normal': "#16213e",
            'regular_active': "#0f3460",
            'caps_active': "#e94560",
            'shift_active': "#e94560",
            'lang_active': "#10b981",
            'lang_inactive': "#e94560"
        }
        
        self.create_ui()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.text_area.bind('<Key>', self.on_physical_key_press)
        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ keycode - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –í–°–ï–• —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö
        self.text_area.bind('<Control-Key>', self.on_ctrl_key_universal)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def create_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg="#1a1a2e")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        text_frame = tk.Frame(main_frame, bg="#16213e", bd=2, relief=tk.RAISED)
        text_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        scrollbar = tk.Scrollbar(text_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.text_area = tk.Text(
            text_frame, font=("Arial", 14),
            bg="#0f3460", fg="#e94560",
            insertbackground="#e94560",
            wrap=tk.WORD, undo=False,
            yscrollcommand=scrollbar.set
        )
        self.text_area.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.text_area.yview)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.text_area.bind("<<Modified>>", self.on_text_modified)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏)
        self.create_context_menu()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(main_frame, bg="#1a1a2e")
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        buttons_frame = tk.Frame(control_frame, bg="#1a1a2e")
        buttons_frame.pack(anchor=tk.CENTER)
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
        button_configs = [
            ("‚Ü∂ –ù–∞–∑–∞–¥", self.undo, "#f59e0b", "#fbbf24"),
            ("‚Ü∑ –í–ø–µ—Ä—ë–¥", self.redo, "#f59e0b", "#fbbf24"),
            ("‚óåÃÅ –£–¥–∞—Ä–µ–Ω–∏–µ", self.add_accent, "#00d2d3", "#01e4e5"),
            ("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", self.smart_copy, "#8b5cf6", "#a78bfa"),
            ("üìÑ –í—Å—Ç–∞–≤–∏—Ç—å", self.paste_text, "#8b5cf6", "#a78bfa"),
            ("üóë –û—á–∏—Å—Ç–∏—Ç—å", self.clear_text, "#ef4444", "#f87171"),
            ("üìÇ –û—Ç–∫—Ä—ã—Ç—å", self.open_file, "#3b82f6", "#60a5fa"),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_file, "#10b981", "#34d399")
        ]
        
        for text, command, bg, active_bg in button_configs:
            btn = tk.Button(buttons_frame, text=text, command=command,
                          font=("Arial", 10, "bold"), bg=bg, fg="white",
                          activebackground=active_bg, relief=tk.FLAT, 
                          padx=15, pady=5, cursor="hand2")
            btn.pack(side=tk.LEFT, padx=2)
        
        # –§—Ä–µ–π–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.keyboard_frame = tk.Frame(main_frame, bg="#1a1a2e")
        self.keyboard_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(0, 0))
        
        self.create_keyboard()
        
    def create_keyboard(self):
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
        for widget in self.keyboard_frame.winfo_children():
            widget.destroy()
        
        self.key_buttons = {}
        self.caps_button = None
        self.shift_buttons = []
        layout = self.layouts[self.current_layout]
        
        for row in layout:
            row_frame = tk.Frame(self.keyboard_frame, bg="#1a1a2e")
            row_frame.pack(pady=2)
            
            for key in row:
                width = 30 if key == 'Space' else (8 if key in ['Backspace', 'Tab', 'Enter', 'Shift', 'Caps'] else 4)
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ü–≤–µ—Ç–æ–≤
                is_special = key in ['Backspace', 'Tab', 'Enter', 'Shift', 'Caps', 'Ctrl', 'Alt']
                bg_color = self.color_cache['special_normal'] if is_special else self.color_cache['regular_normal']
                active_bg = self.color_cache['special_active'] if is_special else self.color_cache['regular_active']
                
                display_text = self.get_display_text(key)
                
                btn = tk.Button(
                    row_frame, text=display_text, width=width, height=2,
                    font=("Arial", 11, "bold"), bg=bg_color, fg="white",
                    activebackground=active_bg, activeforeground="white",
                    relief=tk.FLAT, bd=0, command=lambda k=key: self.key_press(k),
                    cursor="hand2"
                )
                btn.pack(side=tk.LEFT, padx=2)
                
                if key == 'Caps':
                    self.caps_button = btn
                elif key == 'Shift':
                    self.shift_buttons.append(btn)
                elif len(key) == 1:
                    self.key_buttons[key] = btn
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        lang_row_frame = tk.Frame(self.keyboard_frame, bg="#1a1a2e")
        lang_row_frame.pack(pady=(10, 2))
        
        for lang in ['EN', 'RU', 'UA']:
            lang_btn = tk.Button(
                lang_row_frame, text=lang,
                command=lambda l=lang: self.change_layout(l),
                font=("Arial", 11, "bold"), fg="white",
                activebackground="#ff6b81", relief=tk.FLAT,
                width=8, height=2, bd=0, cursor="hand2"
            )
            lang_btn.pack(side=tk.LEFT, padx=3)
            self.lang_buttons[lang] = lang_btn
        
        self.update_lang_buttons()
    
    def create_context_menu(self):
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        self.context_menu = tk.Menu(self.root, tearoff=0, 
                                     bg="#16213e", fg="white",
                                     activebackground="#0f3460", 
                                     activeforeground="white",
                                     font=("Arial", 10))
        
        self.context_menu.add_command(label="‚úÇ –í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selected_text)
        self.context_menu.add_command(label="üìÑ –í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üîç –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=self.select_all_text)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–µ –º—ã—à–∏
        self.text_area.bind("<Button-3>", self.show_context_menu)
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –≤ –º–µ—Å—Ç–µ –∫–ª–∏–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            has_selection = self.text_area.tag_ranges(tk.SEL)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if has_selection:
                self.context_menu.entryconfig("‚úÇ –í—ã—Ä–µ–∑–∞—Ç—å", state=tk.NORMAL)
                self.context_menu.entryconfig("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", state=tk.NORMAL)
            else:
                self.context_menu.entryconfig("‚úÇ –í—ã—Ä–µ–∑–∞—Ç—å", state=tk.DISABLED)
                self.context_menu.entryconfig("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", state=tk.DISABLED)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
    
    def save_undo_state(self, force=False):
        """–£–õ–£–ß–®–ï–ù–û: –£–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–æ–≤/Enter –∏–ª–∏ –ø–∞—É–∑—ã –≤ –Ω–∞–±–æ—Ä–µ"""
        if self.undo_in_progress:
            return
        
        import time
        current_time = int(time.time() * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        time_since_last = current_time - self.last_input_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –µ—Å–ª–∏:
        # 1. force=True (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
        # 2. –ü—Ä–æ—à–ª–∞ –ø–∞—É–∑–∞ –≤ –Ω–∞–±–æ—Ä–µ (>1 —Å–µ–∫)
        # 3. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥
        if force or time_since_last > self.typing_pause_threshold or self.last_input_time == 0:
            self.last_input_time = current_time
            self._do_save_undo_state()
        else:
            # –ò–Ω–∞—á–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.last_input_time = current_time
            if self.save_timer:
                self.root.after_cancel(self.save_timer)
            self.save_timer = self.root.after(self.typing_pause_threshold, self._do_save_undo_state)
            self.pending_save = True
    
    def _do_save_undo_state(self):
        """–†–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        if self.undo_in_progress:
            return
        
        self.pending_save = False
        
        try:
            current_text = self.text_area.get("1.0", tk.END)
        except:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_text != self.last_saved_text:
            self.undo_stack.append(self.last_saved_text)
            self.last_saved_text = current_text
            self.redo_stack.clear()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ (–º–∞–∫—Å–∏–º—É–º 500 –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
            if len(self.undo_stack) > 500:
                self.undo_stack.pop(0)
    
    def get_display_text(self, key):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏—à–µ"""
        if key in ['Backspace', 'Tab', 'Enter', 'Shift', 'Caps', 'Ctrl', 'Alt', 'Space']:
            return key
        
        # –ï—Å–ª–∏ Shift –Ω–∞–∂–∞—Ç –∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        if self.shift_pressed and key in self.shift_maps[self.current_layout]:
            return self.shift_maps[self.current_layout][key]
        
        # –ï—Å–ª–∏ Caps Lock –∏–ª–∏ Shift - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É
        if (self.caps_lock or self.shift_pressed) and len(key) == 1 and key.isalpha():
            return key.upper()
        
        return key
    
    def key_press(self, key):
        if key == 'Backspace':
            try:
                pos = self.text_area.index(tk.INSERT)
                if pos != "1.0":
                    self.text_area.delete(f"{pos}-1c", pos)
                    self.save_undo_state(force=True)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            except tk.TclError:
                pass
        elif key == 'Enter':
            self.text_area.insert(tk.INSERT, '\n')
            self.save_undo_state(force=True)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ Enter
        elif key == 'Space':
            self.text_area.insert(tk.INSERT, ' ')
            self.save_undo_state(force=True)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
        elif key == 'Tab':
            self.text_area.insert(tk.INSERT, '    ')
            self.save_undo_state(force=True)
        elif key == 'Caps':
            self.caps_lock = not self.caps_lock
            self.update_key_display()
        elif key == 'Shift':
            self.shift_pressed = not self.shift_pressed
            self.update_key_display()
        elif key in ['Ctrl', 'Alt']:
            pass
        else:
            char = key
            if self.shift_pressed and key in self.shift_maps[self.current_layout]:
                char = self.shift_maps[self.current_layout][key]
                self.shift_pressed = False
                self.update_key_display()
            elif (self.shift_pressed or self.caps_lock) and len(key) == 1 and key.isalpha():
                char = char.upper()
                if self.shift_pressed:
                    self.shift_pressed = False
                    self.update_key_display()
            
            self.text_area.insert(tk.INSERT, char)
            self.save_undo_state()  # –û–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –±—É–∫–≤
    
    def update_key_display(self):
        """–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±—É–∫–≤–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏—à–∞—Ö
        for key, button in self.key_buttons.items():
            new_text = self.get_display_text(key)
            if button['text'] != new_text:
                button.config(text=new_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Caps Lock
        if self.caps_button:
            new_bg = self.color_cache['caps_active'] if self.caps_lock else self.color_cache['special_normal']
            if self.caps_button['bg'] != new_bg:
                self.caps_button.config(bg=new_bg)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Shift
        new_shift_bg = self.color_cache['shift_active'] if self.shift_pressed else self.color_cache['special_normal']
        for shift_btn in self.shift_buttons:
            if shift_btn['bg'] != new_shift_bg:
                shift_btn.config(bg=new_shift_bg)
    
    def update_lang_buttons(self):
        """–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤"""
        for lang, button in self.lang_buttons.items():
            new_bg = self.color_cache['lang_active'] if lang == self.current_layout else self.color_cache['lang_inactive']
            if button['bg'] != new_bg:
                button.config(bg=new_bg)
    
    def change_layout(self, lang):
        """–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"""
        if self.current_layout == lang:
            return
        
        self.current_layout = lang
        self.create_keyboard()
        self.update_key_display()
    
    def on_physical_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        # –°–ø–∏—Å–æ–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        non_printable = {
            'Control_L', 'Control_R', 'Alt_L', 'Alt_R', 
            'Shift_L', 'Shift_R', 'Caps_Lock', 'Super_L', 'Super_R',
            'Win_L', 'Win_R', 'Menu', 'Num_Lock', 'Scroll_Lock',
            'Left', 'Right', 'Up', 'Down', 'Home', 'End', 'Prior', 'Next',
            'Insert', 'Pause', 'Print', 'F1', 'F2', 'F3', 'F4',
            'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'
        }
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if event.keysym in non_printable:
            return None
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å Ctrl (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if event.state & 0x4:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —É–º–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        char = event.char
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ:
        # - Enter
        # - –ü—Ä–æ–±–µ–ª
        # - Backspace/Delete
        if event.keysym in ['Return', 'space', 'BackSpace', 'Delete']:
            self.root.after_idle(lambda: self.save_undo_state(force=True))
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ - —É–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.root.after_idle(self.save_undo_state)
        
        return None
    
    def on_ctrl_key_universal(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+–∫–ª–∞–≤–∏—à–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –í–°–ï–• —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö!)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º keycode –≤–º–µ—Å—Ç–æ keysym - keycode –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏!
        # Linux keycodes: Z=52, Y=29, V=55, C=54, X=53, A=38
        # Windows/Mac keycodes: Z=90, Y=89, V=86, C=67, X=88, A=65
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º keysym –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        
        keysym_lower = event.keysym.lower()
        keycode = event.keycode
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Z (—Ä—É—Å—Å–∫–∞—è –Ø, —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –Ø)
        is_z_key = (keycode in [52, 90] or keysym_lower in ['z', '—è'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Y (—Ä—É—Å—Å–∫–∞—è –ù, —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ù)  
        is_y_key = (keycode in [29, 89] or keysym_lower in ['y', '–Ω', 'n'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º V (—Ä—É—Å—Å–∫–∞—è –ú, —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ú)
        is_v_key = (keycode in [55, 86] or keysym_lower in ['v', '–º', 'm'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º C (—Ä—É—Å—Å–∫–∞—è –°, —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –°)
        is_c_key = (keycode in [54, 67] or keysym_lower in ['c', '—Å'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º X (—Ä—É—Å—Å–∫–∞—è –ß, —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ß)
        is_x_key = (keycode in [53, 88] or keysym_lower in ['x', '—á'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º A (—Ä—É—Å—Å–∫–∞—è –§, —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –§)
        is_a_key = (keycode in [38, 65] or keysym_lower in ['a', '—Ñ'])
        
        if is_z_key:
            # Ctrl+Shift+Z = Redo
            if event.state & 0x1:  # Shift –Ω–∞–∂–∞—Ç
                self.redo()
                return "break"
            # Ctrl+Z = Undo
            else:
                self.undo()
                return "break"
        
        elif is_y_key:
            # Ctrl+Y = Redo
            self.redo()
            return "break"
        
        elif is_v_key:
            # Ctrl+V = Paste
            self.paste_text()
            return "break"
        
        elif is_c_key:
            # Ctrl+C = Smart Copy (–≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –∏–ª–∏ –≤—Å—ë)
            self.smart_copy()
            return "break"
        
        elif is_x_key:
            # Ctrl+X = Cut
            self.cut_text()
            return "break"
        
        elif is_a_key:
            # Ctrl+A = Select All
            self.select_all_text()
            return "break"
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return None
    
    def undo(self):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º pending –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ undo
        if self.pending_save:
            if self.save_timer:
                self.root.after_cancel(self.save_timer)
            self._do_save_undo_state()
        
        if len(self.undo_stack) > 0:
            try:
                self.undo_in_progress = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ redo
                self.redo_stack.append(self.last_saved_text)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                previous_text = self.undo_stack.pop()
                self.last_saved_text = previous_text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                try:
                    cursor_pos = self.text_area.index(tk.INSERT)
                except:
                    cursor_pos = "1.0"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                self.text_area.delete("1.0", tk.END)
                self.text_area.insert("1.0", previous_text)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                try:
                    self.text_area.mark_set(tk.INSERT, cursor_pos)
                    self.text_area.see(tk.INSERT)
                except:
                    pass
            finally:
                self.undo_in_progress = False
        else:
            self.show_notification("‚ö† –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")
    
    def redo(self):
        """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        if len(self.redo_stack) > 0:
            try:
                self.undo_in_progress = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ undo
                self.undo_stack.append(self.last_saved_text)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                next_text = self.redo_stack.pop()
                self.last_saved_text = next_text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                try:
                    cursor_pos = self.text_area.index(tk.INSERT)
                except:
                    cursor_pos = "1.0"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                self.text_area.delete("1.0", tk.END)
                self.text_area.insert("1.0", next_text)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                try:
                    self.text_area.mark_set(tk.INSERT, cursor_pos)
                    self.text_area.see(tk.INSERT)
                except:
                    pass
            finally:
                self.undo_in_progress = False
        else:
            self.show_notification("‚ö† –ù–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å")
    
    def add_accent(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ —É–¥–∞—Ä–µ–Ω–∏—è"""
        self.text_area.insert(tk.INSERT, '\u0301')
        self.save_undo_state(force=True)
    
    def smart_copy(self):
        """–£–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ - –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ
            if self.text_area.tag_ranges(tk.SEL):
                self.copy_selected_text()
            else:
                # –ò–Ω–∞—á–µ –∫–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                self.copy_text()
        except:
            self.show_notification("‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def copy_text(self):
        """–ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        text = self.text_area.get("1.0", tk.END).strip()
        try:
            pyperclip.copy(text)
            self.show_notification("‚úì –í–µ—Å—å —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
        except:
            try:
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                self.show_notification("‚úì –í–µ—Å—å —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
            except:
                self.show_notification("‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def copy_selected_text(self):
        """–ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if self.text_area.tag_ranges(tk.SEL):
                selected_text = self.text_area.get(tk.SEL_FIRST, tk.SEL_LAST)
                try:
                    pyperclip.copy(selected_text)
                    self.show_notification("‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
                except:
                    self.root.clipboard_clear()
                    self.root.clipboard_append(selected_text)
                    self.show_notification("‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
            else:
                self.show_notification("‚úó –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è")
        except:
            self.show_notification("‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def cut_text(self):
        """–í—ã—Ä–µ–∑–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if self.text_area.tag_ranges(tk.SEL):
                selected_text = self.text_area.get(tk.SEL_FIRST, tk.SEL_LAST)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
                try:
                    pyperclip.copy(selected_text)
                except:
                    self.root.clipboard_clear()
                    self.root.clipboard_append(selected_text)
                
                # –£–¥–∞–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                self.text_area.delete(tk.SEL_FIRST, tk.SEL_LAST)
                self.save_undo_state(force=True)
                self.show_notification("‚úì –í—ã—Ä–µ–∑–∞–Ω–æ!")
            else:
                self.show_notification("‚úó –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è")
        except:
            self.show_notification("‚úó –û—à–∏–±–∫–∞ –≤—ã—Ä–µ–∑–∞–Ω–∏—è")
    
    def select_all_text(self):
        """–í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç"""
        self.text_area.tag_add(tk.SEL, "1.0", tk.END)
        self.text_area.mark_set(tk.INSERT, "1.0")
        self.text_area.see(tk.INSERT)
        self.show_notification("‚úì –í—Å—ë –≤—ã–¥–µ–ª–µ–Ω–æ!")
    
    def paste_text(self):
        """–í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ pyperclip
            text = pyperclip.paste()
        except:
            try:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - —á–µ—Ä–µ–∑ tkinter
                text = self.root.clipboard_get()
            except:
                self.show_notification("‚úó –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
                return
        
        if text:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            self.text_area.insert(tk.INSERT, text)
            self.save_undo_state(force=True)
            self.show_notification("‚úì –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω!")
        else:
            self.show_notification("‚úó –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
    
    def clear_text(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        if self.is_modified:
            response = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç?",
                icon='warning'
            )
            if not response:
                return
        
        self.text_area.delete("1.0", tk.END)
        # –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫–∏ undo/redo
        self.undo_stack.clear()
        self.redo_stack.clear()
        self.last_saved_text = "\n"
        self.is_modified = False
        self.current_file = None
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ–º pending —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if self.save_timer:
            self.root.after_cancel(self.save_timer)
            self.save_timer = None
            self.pending_save = False
        
        self.update_title()
    
    def open_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"""
        if self.is_modified:
            if not self.ask_save_changes():
                return
        
        file_path = filedialog.askopenfilename(
            title="–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                    
                self.undo_in_progress = True
                self.text_area.delete("1.0", tk.END)
                self.text_area.insert("1.0", content)
                self.undo_in_progress = False
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫–∏ undo/redo
                self.undo_stack.clear()
                self.redo_stack.clear()
                self.last_saved_text = self.text_area.get("1.0", tk.END)
                self.current_file = file_path
                self.is_modified = False
                self.text_area.edit_modified(False)
                
                # –û—Ç–º–µ–Ω—è–µ–º pending —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if self.save_timer:
                    self.root.after_cancel(self.save_timer)
                    self.save_timer = None
                    self.pending_save = False
                
                self.update_title()
                self.show_notification("‚úì –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª"""
        if self.current_file:
            file_path = self.current_file
        else:
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
        
        if file_path:
            try:
                content = self.text_area.get("1.0", tk.END).strip()
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(content)
                self.current_file = file_path
                self.is_modified = False
                self.text_area.edit_modified(False)
                self.update_title()
                self.show_notification("‚úì –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
    
    def on_text_modified(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if self.text_area.edit_modified():
            self.is_modified = True
            self.update_title()
            self.text_area.edit_modified(False)
    
    def update_title(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞"""
        title = "Virtual Keyboard Plus"
        if self.current_file:
            import os
            filename = os.path.basename(self.current_file)
            title = f"{filename} - {title}"
        if self.is_modified:
            title = "* " + title
        self.root.title(title)
    
    def ask_save_changes(self):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        response = messagebox.askyesnocancel(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
            "–î–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
            icon='question'
        )
        
        if response is True:
            self.save_file()
            return True
        elif response is False:
            return True
        else:
            return False
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending —Ç–∞–π–º–µ—Ä—ã
        if self.save_timer:
            self.root.after_cancel(self.save_timer)
        
        if self.is_modified:
            if self.ask_save_changes():
                self.root.destroy()
        else:
            self.root.destroy()
    
    def show_notification(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification = tk.Label(
            self.root, text=message, font=("Arial", 12, "bold"),
            bg="#10b981", fg="white", padx=20, pady=10,
            relief=tk.RAISED, bd=2
        )
        notification.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
        self.root.after(1500, notification.destroy)

if __name__ == "__main__":
    root = tk.Tk()
    app = VirtualKeyboard(root)
    root.mainloop()
